line_quantity: 3
column_quantity: 3
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 2
  1  0  0
  1  0  0
  0  1  0
---------
  0  0  0
  0  0  0
  0  0  1
---------
clauses quantity: 75
Resolution...
Satisfaisable : True
Temps de resolution : 0.00s
filtered_interpretation:
[1, 2, 3, 4, 23]
(0, 0)
(-1, 2)
(0, 0, (1, 0), 0)
(1, 1)
(2, 0, (0, 1), 1)

Step:  0
State 0:
[1, 0, 0]
[1, 0, 0]
[0, 1, 0]
Coup: ( 0 , 0 ) to ( 2 , 0 )
Step:  1
State 1:
[0, 0, 0]
[0, 0, 0]
[1, 1, 0]
Coup: ( 2 , 0 ) to ( 2 , 2 )
Step:  2
State -1:
[0, 0, 0]
[0, 0, 0]
[0, 0, 1]
True
Votre programme marche sur le couple:
([[1, 0, 0], [1, 0, 0], [0, 1, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 1]])
 
 

line_quantity: 3
column_quantity: 3
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 1
 -1  1 -1
 -1  1 -1
 -1  0 -1
---------
 -1  0 -1
 -1  0 -1
 -1  1 -1
---------
clauses quantity: 38
Resolution...
Satisfaisable : True
Temps de resolution : 0.00s
filtered_interpretation:
[1, 2, 5]
(0, 0)
(-1, 1)
(0, 1, (1, 0), 0)

Step:  0
State 0:
[-1, 1, -1]
[-1, 1, -1]
[-1, 0, -1]
Coup: ( 0 , 1 ) to ( 2 , 1 )
Step:  1
State -1:
[-1, 0, -1]
[-1, 0, -1]
[-1, 1, -1]
True
Votre programme marche sur le couple:
([[-1, 1, -1], [-1, 1, -1], [-1, 0, -1]], [[-1, 0, -1], [-1, 0, -1], [-1, 1, -1]])
 
 

line_quantity: 3
column_quantity: 4
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 3
  0  1  0 -1
  1  1  1  1
  0 -1  1  1
---------
  0  0  0 -1
  0  1  0  1
  1 -1  0  1
---------
clauses quantity: 152
Resolution...
Satisfaisable : True
Temps de resolution : 0.00s
filtered_interpretation:
[1, 2, 19, 20, 29, 30, 46]
(0, 0)
(-1, 3)
(2, 2, (-1, 0), 0)
(1, 1)
(0, 2, (0, -1), 1)
(2, 2)
(0, 0, (1, 0), 2)

Step:  0
State 0:
[0, 1, 0, -1]
[1, 1, 1, 1]
[0, -1, 1, 1]
Coup: ( 2 , 2 ) to ( 0 , 2 )
Step:  1
State 1:
[0, 1, 1, -1]
[1, 1, 0, 1]
[0, -1, 0, 1]
Coup: ( 0 , 2 ) to ( 0 , 0 )
Step:  2
State 2:
[1, 0, 0, -1]
[1, 1, 0, 1]
[0, -1, 0, 1]
Coup: ( 0 , 0 ) to ( 2 , 0 )
Step:  3
State -1:
[0, 0, 0, -1]
[0, 1, 0, 1]
[1, -1, 0, 1]
True
Votre programme marche sur le couple:
([[0, 1, 0, -1], [1, 1, 1, 1], [0, -1, 1, 1]], [[0, 0, 0, -1], [0, 1, 0, 1], [1, -1, 0, 1]])
 
 

line_quantity: 8
column_quantity: 7
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 8
 -1 -1 -1  1 -1 -1 -1
 -1 -1  0  1  0 -1 -1
 -1  0  0  0  1  0 -1
  1  1  0  0  0  1  0
  0  0  1  0  1  0  0
 -1  1  0  0  0  0 -1
 -1 -1  0  0  0 -1 -1
 -1 -1 -1  0 -1 -1 -1
------------------------
 -1 -1 -1  0 -1 -1 -1
 -1 -1  0  0  0 -1 -1
 -1  0  0  0  0  0 -1
  0  0  0  1  0  0  0
  0  0  0  0  0  0  0
 -1  0  0  0  0  0 -1
 -1 -1  0  0  0 -1 -1
 -1 -1 -1  0 -1 -1 -1
------------------------
clauses quantity: 1837
Resolution...
Satisfaisable : True
Temps de resolution : 0.00s
filtered_interpretation:
[1, 2, 63, 64, 236, 336, 450, 507, 515, 679, 726, 851, 905, 966, 1127, 1190, 1310]
(0, 0)
(-1, 8)
(3, 0, (0, 1), 0)
(2, 1)
(3, 2, (1, 0), 1)
(6, 2)
(5, 1, (0, 1), 2)
(13, 3)
(0, 3, (1, 0), 3)
(21, 4)
(2, 3, (0, 1), 4)
(29, 5)
(2, 5, (1, 0), 5)
(33, 6)
(4, 5, (0, -1), 6)
(40, 7)
(5, 3, (-1, 0), 7)

Step:  0
State 0:
[-1, -1, -1, 1, -1, -1, -1]
[-1, -1, 0, 1, 0, -1, -1]
[-1, 0, 0, 0, 1, 0, -1]
[1, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 1, 0, 0]
[-1, 1, 0, 0, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 3 , 0 ) to ( 3 , 2 )
Step:  1
State 2:
[-1, -1, -1, 1, -1, -1, -1]
[-1, -1, 0, 1, 0, -1, -1]
[-1, 0, 0, 0, 1, 0, -1]
[0, 0, 1, 0, 0, 1, 0]
[0, 0, 1, 0, 1, 0, 0]
[-1, 1, 0, 0, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 3 , 2 ) to ( 5 , 2 )
Step:  2
State 6:
[-1, -1, -1, 1, -1, -1, -1]
[-1, -1, 0, 1, 0, -1, -1]
[-1, 0, 0, 0, 1, 0, -1]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 0]
[-1, 1, 1, 0, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 5 , 1 ) to ( 5 , 3 )
Step:  3
State 13:
[-1, -1, -1, 1, -1, -1, -1]
[-1, -1, 0, 1, 0, -1, -1]
[-1, 0, 0, 0, 1, 0, -1]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 0 , 3 ) to ( 2 , 3 )
Step:  4
State 21:
[-1, -1, -1, 0, -1, -1, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 1, 0, -1]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 2 , 3 ) to ( 2 , 5 )
Step:  5
State 29:
[-1, -1, -1, 0, -1, -1, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 0, 0, 1, -1]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 2 , 5 ) to ( 4 , 5 )
Step:  6
State 33:
[-1, -1, -1, 0, -1, -1, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 0, 0, 0, -1]
[0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 1, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 4 , 5 ) to ( 4 , 3 )
Step:  7
State 40:
[-1, -1, -1, 0, -1, -1, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 0, 0, 0, -1]
[0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
Coup: ( 5 , 3 ) to ( 3 , 3 )
Step:  8
State -1:
[-1, -1, -1, 0, -1, -1, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 0, 0, 0, -1]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
[-1, 0, 0, 0, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
[-1, -1, -1, 0, -1, -1, -1]
True
Votre programme marche sur le couple:
([[-1, -1, -1, 1, -1, -1, -1], [-1, -1, 0, 1, 0, -1, -1], [-1, 0, 0, 0, 1, 0, -1], [1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [-1, 1, 0, 0, 0, 0, -1], [-1, -1, 0, 0, 0, -1, -1], [-1, -1, -1, 0, -1, -1, -1]], [[-1, -1, -1, 0, -1, -1, -1], [-1, -1, 0, 0, 0, -1, -1], [-1, 0, 0, 0, 0, 0, -1], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, -1], [-1, -1, 0, 0, 0, -1, -1], [-1, -1, -1, 0, -1, -1, -1]])
 
 

line_quantity: 7
column_quantity: 7
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 4
 -1 -1  0  0  0 -1 -1
 -1  0  0  1  0  0 -1
  0  0  1  0  1  0  0
  1  1  0  1  0  0  0
  0  0  1  0  0  1  1
 -1  1  1  0  0  0 -1
 -1 -1  0  0  0 -1 -1
---------------------
 -1 -1  0  0  0 -1 -1
 -1  0  0  1  0  0 -1
  0  0  1  0  1  0  0
  0  0  0  1  0  0  0
  0  0  0  0  1  0  0
 -1  0  1  1  0  0 -1
 -1 -1  0  0  0 -1 -1
---------------------
clauses quantity: 880
Resolution...
Satisfaisable : True
Temps de resolution : 0.00s
filtered_interpretation:
[1, 2, 114, 115, 207, 262, 408, 458, 532]
(0, 0)
(-1, 4)
(5, 1, (0, 1), 0)
(4, 1)
(3, 0, (0, 1), 1)
(11, 2)
(4, 6, (0, -1), 2)
(36, 3)
(3, 2, (1, 0), 3)

Step:  0
State 0:
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 0, 0, -1]
[0, 0, 1, 0, 1, 0, 0]
[1, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1, 1]
[-1, 1, 1, 0, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
Coup: ( 5 , 1 ) to ( 5 , 3 )
Step:  1
State 4:
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 0, 0, -1]
[0, 0, 1, 0, 1, 0, 0]
[1, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1, 1]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
Coup: ( 3 , 0 ) to ( 3 , 2 )
Step:  2
State 11:
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 0, 0, -1]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1, 1]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
Coup: ( 4 , 6 ) to ( 4 , 4 )
Step:  3
State 36:
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 0, 0, -1]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0, 0]
[-1, 0, 0, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
Coup: ( 3 , 2 ) to ( 5 , 2 )
Step:  4
State -1:
[-1, -1, 0, 0, 0, -1, -1]
[-1, 0, 0, 1, 0, 0, -1]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0]
[-1, 0, 1, 1, 0, 0, -1]
[-1, -1, 0, 0, 0, -1, -1]
True
Votre programme marche sur le couple:
([[-1, -1, 0, 0, 0, -1, -1], [-1, 0, 0, 1, 0, 0, -1], [0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [-1, 1, 1, 0, 0, 0, -1], [-1, -1, 0, 0, 0, -1, -1]], [[-1, -1, 0, 0, 0, -1, -1], [-1, 0, 0, 1, 0, 0, -1], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [-1, 0, 1, 1, 0, 0, -1], [-1, -1, 0, 0, 0, -1, -1]])
 
 

line_quantity: 2
column_quantity: 2
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 1
  1  0
  1  0
------
  0  1
  0  0
------
clauses quantity: 18
Resolution...
Satisfaisable : False
Temps de resolution : 0.00s
Votre programme marche sur le couple:
([[1, 0], [1, 0]], [[0, 1], [0, 0]])
 
 

line_quantity: 3
column_quantity: 3
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 2
  1  1  0
  1  1  0
  0  0  1
---------
  0  0  0
  0  1  0
  1  0  1
---------
clauses quantity: 82
Resolution...
Satisfaisable : False
Temps de resolution : 0.00s
Votre programme marche sur le couple:
([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [[0, 0, 0], [0, 1, 0], [1, 0, 1]])
 
 

line_quantity: 4
column_quantity: 4
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 5
  1  0 -1  1
  1 -1  0  1
  1  1  0  0
  1  0 -1  1
------------
  1  0 -1  0
  1 -1  0  1
  0  0  0  0
  0  0 -1  0
------------
clauses quantity: 337
Resolution...
Satisfaisable : False
Temps de resolution : 0.00s
Votre programme marche sur le couple:
([[1, 0, -1, 1], [1, -1, 0, 1], [1, 1, 0, 0], [1, 0, -1, 1]], [[1, 0, -1, 0], [1, -1, 0, 1], [0, 0, 0, 0], [0, 0, -1, 0]])
 
 

line_quantity: 4
column_quantity: 4
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 10
 -1  1  1 -1
  1  0  1  1
  1  1  1  1
 -1  1  1 -1
------------
 -1  0  0 -1
  0  1  0  0
  0  0  0  0
 -1  0  0 -1
------------
clauses quantity: 763
Resolution...
Satisfaisable : False
Temps de resolution : 0.00s
Votre programme marche sur le couple:
([[-1, 1, 1, -1], [1, 0, 1, 1], [1, 1, 1, 1], [-1, 1, 1, -1]], [[-1, 0, 0, -1], [0, 1, 0, 0], [0, 0, 0, 0], [-1, 0, 0, -1]])
 
 

line_quantity: 7
column_quantity: 7
Construction des clauses

le nombre d’ étapes pour passer de m1 à m2: 31
 -1 -1  1  1  1 -1 -1
 -1 -1  1  1  1 -1 -1
  1  1  1  1  1  1  1
  1  1  1  0  1  1  1
  1  1  1  1  1  1  1
 -1 -1  1  1  1 -1 -1
 -1 -1  1  1  1 -1 -1
---------------------
 -1 -1  0  0  0 -1 -1
 -1 -1  0  0  0 -1 -1
  0  0  0  0  0  0  0
  0  0  0  1  0  0  0
  0  0  0  0  0  0  0
 -1 -1  0  0  0 -1 -1
 -1 -1  0  0  0 -1 -1
---------------------
